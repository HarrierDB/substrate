// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_contracts
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-17, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm3`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_contracts
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./frame/contracts/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_contracts.
pub trait WeightInfo {
	fn on_process_deletion_queue_batch() -> Weight;
	fn on_initialize_per_trie_key(k: u32, ) -> Weight;
	fn on_initialize_per_queue_item(q: u32, ) -> Weight;
	fn reinstrument(c: u32, ) -> Weight;
	fn call_with_code_per_byte(c: u32, ) -> Weight;
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight;
	fn instantiate(s: u32, ) -> Weight;
	fn call() -> Weight;
	fn upload_code(c: u32, ) -> Weight;
	fn remove_code() -> Weight;
	fn set_code() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_is_contract(r: u32, ) -> Weight;
	fn seal_code_hash(r: u32, ) -> Weight;
	fn seal_own_code_hash(r: u32, ) -> Weight;
	fn seal_caller_is_origin(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_now(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_debug_message(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight;
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_contains_storage(r: u32, ) -> Weight;
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight;
	fn seal_take_storage(r: u32, ) -> Weight;
	fn seal_take_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_delegate_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
	fn seal_ecdsa_recover(r: u32, ) -> Weight;
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight;
	fn seal_set_code_hash(r: u32, ) -> Weight;
	fn instr_i64const(r: u32, ) -> Weight;
	fn instr_i64load(r: u32, ) -> Weight;
	fn instr_i64store(r: u32, ) -> Weight;
	fn instr_select(r: u32, ) -> Weight;
	fn instr_if(r: u32, ) -> Weight;
	fn instr_br(r: u32, ) -> Weight;
	fn instr_br_if(r: u32, ) -> Weight;
	fn instr_br_table(r: u32, ) -> Weight;
	fn instr_br_table_per_entry(e: u32, ) -> Weight;
	fn instr_call(r: u32, ) -> Weight;
	fn instr_call_indirect(r: u32, ) -> Weight;
	fn instr_call_indirect_per_param(p: u32, ) -> Weight;
	fn instr_local_get(r: u32, ) -> Weight;
	fn instr_local_set(r: u32, ) -> Weight;
	fn instr_local_tee(r: u32, ) -> Weight;
	fn instr_global_get(r: u32, ) -> Weight;
	fn instr_global_set(r: u32, ) -> Weight;
	fn instr_memory_current(r: u32, ) -> Weight;
	fn instr_memory_grow(r: u32, ) -> Weight;
	fn instr_i64clz(r: u32, ) -> Weight;
	fn instr_i64ctz(r: u32, ) -> Weight;
	fn instr_i64popcnt(r: u32, ) -> Weight;
	fn instr_i64eqz(r: u32, ) -> Weight;
	fn instr_i64extendsi32(r: u32, ) -> Weight;
	fn instr_i64extendui32(r: u32, ) -> Weight;
	fn instr_i32wrapi64(r: u32, ) -> Weight;
	fn instr_i64eq(r: u32, ) -> Weight;
	fn instr_i64ne(r: u32, ) -> Weight;
	fn instr_i64lts(r: u32, ) -> Weight;
	fn instr_i64ltu(r: u32, ) -> Weight;
	fn instr_i64gts(r: u32, ) -> Weight;
	fn instr_i64gtu(r: u32, ) -> Weight;
	fn instr_i64les(r: u32, ) -> Weight;
	fn instr_i64leu(r: u32, ) -> Weight;
	fn instr_i64ges(r: u32, ) -> Weight;
	fn instr_i64geu(r: u32, ) -> Weight;
	fn instr_i64add(r: u32, ) -> Weight;
	fn instr_i64sub(r: u32, ) -> Weight;
	fn instr_i64mul(r: u32, ) -> Weight;
	fn instr_i64divs(r: u32, ) -> Weight;
	fn instr_i64divu(r: u32, ) -> Weight;
	fn instr_i64rems(r: u32, ) -> Weight;
	fn instr_i64remu(r: u32, ) -> Weight;
	fn instr_i64and(r: u32, ) -> Weight;
	fn instr_i64or(r: u32, ) -> Weight;
	fn instr_i64xor(r: u32, ) -> Weight;
	fn instr_i64shl(r: u32, ) -> Weight;
	fn instr_i64shrs(r: u32, ) -> Weight;
	fn instr_i64shru(r: u32, ) -> Weight;
	fn instr_i64rotl(r: u32, ) -> Weight;
	fn instr_i64rotr(r: u32, ) -> Weight;
}

/// Weights for pallet_contracts using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		(1_711_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(7_624_000 as Weight)
			// Standard Error: 0
			.saturating_add((875_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 128]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(7_289_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_001_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		(25_110_000 as Weight)
			// Standard Error: 0
			.saturating_add((48_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		(301_898_000 as Weight)
			// Standard Error: 0
			.saturating_add((52_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(356_735_000 as Weight)
			// Standard Error: 0
			.saturating_add((126_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		(232_993_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call() -> Weight {
		(197_791_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		(54_579_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		(29_542_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	fn set_code() -> Weight {
		(27_706_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		(308_227_000 as Weight)
			// Standard Error: 127_000
			.saturating_add((41_576_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		(209_888_000 as Weight)
			// Standard Error: 563_000
			.saturating_add((304_774_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		(208_146_000 as Weight)
			// Standard Error: 648_000
			.saturating_add((365_006_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		(306_723_000 as Weight)
			// Standard Error: 107_000
			.saturating_add((45_135_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		(302_837_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((17_121_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		(306_746_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((41_397_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		(304_432_000 as Weight)
			// Standard Error: 119_000
			.saturating_add((41_178_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		(312_286_000 as Weight)
			// Standard Error: 151_000
			.saturating_add((117_834_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		(306_943_000 as Weight)
			// Standard Error: 123_000
			.saturating_add((41_136_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(308_182_000 as Weight)
			// Standard Error: 120_000
			.saturating_add((40_816_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		(306_879_000 as Weight)
			// Standard Error: 106_000
			.saturating_add((40_679_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		(307_720_000 as Weight)
			// Standard Error: 118_000
			.saturating_add((40_767_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(314_820_000 as Weight)
			// Standard Error: 163_000
			.saturating_add((100_056_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		(183_864_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((19_675_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		(308_249_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((39_842_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(368_027_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((9_671_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(_r: u32, ) -> Weight {
		(305_366_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(303_302_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((233_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		(308_620_000 as Weight)
			// Standard Error: 3_154_000
			.saturating_add((50_880_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		(320_570_000 as Weight)
			// Standard Error: 205_000
			.saturating_add((133_909_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		(322_392_000 as Weight)
			// Standard Error: 272_000
			.saturating_add((238_686_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:80 w:80)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(566_849_000 as Weight)
			// Standard Error: 1_858_000
			.saturating_add((255_247_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 366_000
			.saturating_add((71_096_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		(192_252_000 as Weight)
			// Standard Error: 106_000
			.saturating_add((33_606_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		(175_345_000 as Weight)
			// Standard Error: 729_000
			.saturating_add((349_105_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		(646_953_000 as Weight)
			// Standard Error: 253_000
			.saturating_add((25_631_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		(662_439_000 as Weight)
			// Standard Error: 290_000
			.saturating_add((9_009_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		(209_059_000 as Weight)
			// Standard Error: 596_000
			.saturating_add((330_379_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		(651_652_000 as Weight)
			// Standard Error: 235_000
			.saturating_add((8_028_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		(232_586_000 as Weight)
			// Standard Error: 469_000
			.saturating_add((267_273_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(600_542_000 as Weight)
			// Standard Error: 359_000
			.saturating_add((54_370_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(84 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		(238_271_000 as Weight)
			// Standard Error: 459_000
			.saturating_add((240_382_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		(554_684_000 as Weight)
			// Standard Error: 248_000
			.saturating_add((8_344_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(84 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		(204_231_000 as Weight)
			// Standard Error: 630_000
			.saturating_add((357_915_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		(688_473_000 as Weight)
			// Standard Error: 344_000
			.saturating_add((55_809_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().writes(83 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		(286_936_000 as Weight)
			// Standard Error: 1_006_000
			.saturating_add((1_480_413_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 7_214_000
			.saturating_add((22_831_042_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 6_127_000
			.saturating_add((22_856_334_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads((79 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		(13_304_637_000 as Weight)
			// Standard Error: 20_270_000
			.saturating_add((1_341_122_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 8_000
			.saturating_add((9_749_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(85 as Weight))
			.saturating_add(T::DbWeight::get().reads((81 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(81 as Weight))
			.saturating_add(T::DbWeight::get().writes((81 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 36_638_000
			.saturating_add((29_135_389_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((320 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((320 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		(16_212_876_000 as Weight)
			// Standard Error: 45_374_000
			.saturating_add((815_960_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 21_000
			.saturating_add((127_881_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(167 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(t as Weight)))
			.saturating_add(T::DbWeight::get().writes(165 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(304_187_000 as Weight)
			// Standard Error: 140_000
			.saturating_add((62_142_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(550_155_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((324_490_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(302_042_000 as Weight)
			// Standard Error: 137_000
			.saturating_add((74_131_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(348_912_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((249_600_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(303_303_000 as Weight)
			// Standard Error: 143_000
			.saturating_add((52_295_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(409_530_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((98_927_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(304_494_000 as Weight)
			// Standard Error: 145_000
			.saturating_add((51_856_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(400_722_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((99_126_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		(430_844_000 as Weight)
			// Standard Error: 948_000
			.saturating_add((3_076_271_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		(319_969_000 as Weight)
			// Standard Error: 617_000
			.saturating_add((2_042_610_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_658_000
			.saturating_add((783_214_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(T::DbWeight::get().reads((79 as Weight).saturating_mul(r as Weight)))
			.saturating_add(T::DbWeight::get().writes((79 as Weight).saturating_mul(r as Weight)))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		(119_142_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((596_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		(118_251_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_362_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		(118_472_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_415_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		(118_775_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_775_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		(118_423_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_976_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		(118_826_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((929_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		(117_976_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_450_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		(118_338_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_590_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(120_947_000 as Weight)
			// Standard Error: 0
			.saturating_add((5_000 as Weight).saturating_mul(e as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		(119_608_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_099_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		(132_759_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((9_411_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(142_986_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((473_000 as Weight).saturating_mul(p as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		(119_240_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((635_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		(119_655_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((683_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		(119_478_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((914_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		(121_700_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_166_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		(122_057_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_360_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		(118_672_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((666_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		(118_138_000 as Weight)
			// Standard Error: 2_353_000
			.saturating_add((236_075_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		(118_801_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((889_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		(118_566_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((891_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(118_891_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((882_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		(119_141_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((885_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(119_305_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((858_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(118_851_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((862_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(118_965_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((877_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		(118_705_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_348_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		(118_581_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_354_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		(118_682_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_350_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		(117_052_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_473_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		(120_256_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_309_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		(119_651_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_340_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		(118_923_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_349_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		(119_062_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_349_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		(118_564_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_356_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		(118_752_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_347_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		(118_873_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_318_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		(118_920_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_325_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		(119_002_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((1_327_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		(118_608_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_998_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		(119_088_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((2_018_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		(119_557_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_967_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		(118_651_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_088_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		(119_148_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_312_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		(119_012_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_325_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		(119_284_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_326_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		(118_958_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_341_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		(119_312_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_331_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		(118_437_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_356_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		(118_997_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_339_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		(119_105_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_342_000 as Weight).saturating_mul(r as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Contracts DeletionQueue (r:1 w:0)
	fn on_process_deletion_queue_batch() -> Weight {
		(1_711_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		(7_624_000 as Weight)
			// Standard Error: 0
			.saturating_add((875_000 as Weight).saturating_mul(k as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(k as Weight)))
	}
	// Storage: Contracts DeletionQueue (r:1 w:0)
	/// The range of component `q` is `[0, 128]`.
	fn on_initialize_per_queue_item(q: u32, ) -> Weight {
		(7_289_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((2_001_000 as Weight).saturating_mul(q as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts PristineCode (r:1 w:0)
	// Storage: Contracts CodeStorage (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn reinstrument(c: u32, ) -> Weight {
		(25_110_000 as Weight)
			// Standard Error: 0
			.saturating_add((48_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	/// The range of component `c` is `[0, 131072]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		(301_898_000 as Weight)
			// Standard Error: 0
			.saturating_add((52_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, s: u32, ) -> Weight {
		(356_735_000 as Weight)
			// Standard Error: 0
			.saturating_add((126_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(s: u32, ) -> Weight {
		(232_993_000 as Weight)
			// Standard Error: 0
			.saturating_add((2_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	fn call() -> Weight {
		(197_791_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Contracts CodeStorage (r:1 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	// Storage: Contracts OwnerInfoOf (r:0 w:1)
	/// The range of component `c` is `[0, 64226]`.
	fn upload_code(c: u32, ) -> Weight {
		(54_579_000 as Weight)
			// Standard Error: 0
			.saturating_add((49_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:0 w:1)
	// Storage: Contracts PristineCode (r:0 w:1)
	fn remove_code() -> Weight {
		(29_542_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:2 w:2)
	fn set_code() -> Weight {
		(27_706_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller(r: u32, ) -> Weight {
		(308_227_000 as Weight)
			// Standard Error: 127_000
			.saturating_add((41_576_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_is_contract(r: u32, ) -> Weight {
		(209_888_000 as Weight)
			// Standard Error: 563_000
			.saturating_add((304_774_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_code_hash(r: u32, ) -> Weight {
		(208_146_000 as Weight)
			// Standard Error: 648_000
			.saturating_add((365_006_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_own_code_hash(r: u32, ) -> Weight {
		(306_723_000 as Weight)
			// Standard Error: 107_000
			.saturating_add((45_135_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_caller_is_origin(r: u32, ) -> Weight {
		(302_837_000 as Weight)
			// Standard Error: 95_000
			.saturating_add((17_121_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_address(r: u32, ) -> Weight {
		(306_746_000 as Weight)
			// Standard Error: 117_000
			.saturating_add((41_397_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas_left(r: u32, ) -> Weight {
		(304_432_000 as Weight)
			// Standard Error: 119_000
			.saturating_add((41_178_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_balance(r: u32, ) -> Weight {
		(312_286_000 as Weight)
			// Standard Error: 151_000
			.saturating_add((117_834_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_value_transferred(r: u32, ) -> Weight {
		(306_943_000 as Weight)
			// Standard Error: 123_000
			.saturating_add((41_136_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_minimum_balance(r: u32, ) -> Weight {
		(308_182_000 as Weight)
			// Standard Error: 120_000
			.saturating_add((40_816_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_block_number(r: u32, ) -> Weight {
		(306_879_000 as Weight)
			// Standard Error: 106_000
			.saturating_add((40_679_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_now(r: u32, ) -> Weight {
		(307_720_000 as Weight)
			// Standard Error: 118_000
			.saturating_add((40_767_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: TransactionPayment NextFeeMultiplier (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_weight_to_fee(r: u32, ) -> Weight {
		(314_820_000 as Weight)
			// Standard Error: 163_000
			.saturating_add((100_056_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_gas(r: u32, ) -> Weight {
		(183_864_000 as Weight)
			// Standard Error: 43_000
			.saturating_add((19_675_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_input(r: u32, ) -> Weight {
		(308_249_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((39_842_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_input_per_kb(n: u32, ) -> Weight {
		(368_027_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((9_671_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 1]`.
	fn seal_return(_r: u32, ) -> Weight {
		(305_366_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_return_per_kb(n: u32, ) -> Weight {
		(303_302_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((233_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts DeletionQueue (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `r` is `[0, 1]`.
	fn seal_terminate(r: u32, ) -> Weight {
		(308_620_000 as Weight)
			// Standard Error: 3_154_000
			.saturating_add((50_880_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((4 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((5 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_random(r: u32, ) -> Weight {
		(320_570_000 as Weight)
			// Standard Error: 205_000
			.saturating_add((133_909_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_deposit_event(r: u32, ) -> Weight {
		(322_392_000 as Weight)
			// Standard Error: 272_000
			.saturating_add((238_686_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: System EventTopics (r:80 w:80)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16]`.
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight {
		(566_849_000 as Weight)
			// Standard Error: 1_858_000
			.saturating_add((255_247_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 366_000
			.saturating_add((71_096_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_debug_message(r: u32, ) -> Weight {
		(192_252_000 as Weight)
			// Standard Error: 106_000
			.saturating_add((33_606_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_storage(r: u32, ) -> Weight {
		(175_345_000 as Weight)
			// Standard Error: 729_000
			.saturating_add((349_105_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_set_storage_per_new_kb(n: u32, ) -> Weight {
		(646_953_000 as Weight)
			// Standard Error: 253_000
			.saturating_add((25_631_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_set_storage_per_old_kb(n: u32, ) -> Weight {
		(662_439_000 as Weight)
			// Standard Error: 290_000
			.saturating_add((9_009_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_clear_storage(r: u32, ) -> Weight {
		(209_059_000 as Weight)
			// Standard Error: 596_000
			.saturating_add((330_379_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_clear_storage_per_kb(n: u32, ) -> Weight {
		(651_652_000 as Weight)
			// Standard Error: 235_000
			.saturating_add((8_028_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().writes(83 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_get_storage(r: u32, ) -> Weight {
		(232_586_000 as Weight)
			// Standard Error: 469_000
			.saturating_add((267_273_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_get_storage_per_kb(n: u32, ) -> Weight {
		(600_542_000 as Weight)
			// Standard Error: 359_000
			.saturating_add((54_370_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(84 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_contains_storage(r: u32, ) -> Weight {
		(238_271_000 as Weight)
			// Standard Error: 459_000
			.saturating_add((240_382_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_contains_storage_per_kb(n: u32, ) -> Weight {
		(554_684_000 as Weight)
			// Standard Error: 248_000
			.saturating_add((8_344_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(84 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_take_storage(r: u32, ) -> Weight {
		(204_231_000 as Weight)
			// Standard Error: 630_000
			.saturating_add((357_915_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: Skipped Metadata (r:0 w:0)
	/// The range of component `n` is `[0, 16]`.
	fn seal_take_storage_per_kb(n: u32, ) -> Weight {
		(688_473_000 as Weight)
			// Standard Error: 344_000
			.saturating_add((55_809_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().writes(83 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_transfer(r: u32, ) -> Weight {
		(286_936_000 as Weight)
			// Standard Error: 1_006_000
			.saturating_add((1_480_413_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 7_214_000
			.saturating_add((22_831_042_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((80 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes((80 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_delegate_call(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 6_127_000
			.saturating_add((22_856_334_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads((79 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `c` is `[0, 1024]`.
	fn seal_call_per_transfer_clone_kb(t: u32, c: u32, ) -> Weight {
		(13_304_637_000 as Weight)
			// Standard Error: 20_270_000
			.saturating_add((1_341_122_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 8_000
			.saturating_add((9_749_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(RocksDbWeight::get().reads(85 as Weight))
			.saturating_add(RocksDbWeight::get().reads((81 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(81 as Weight))
			.saturating_add(RocksDbWeight::get().writes((81 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:80 w:80)
	/// The range of component `r` is `[0, 20]`.
	fn seal_instantiate(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 36_638_000
			.saturating_add((29_135_389_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((320 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((320 as Weight).saturating_mul(r as Weight)))
	}
	// Storage: System Account (r:81 w:81)
	// Storage: Contracts ContractInfoOf (r:81 w:81)
	// Storage: Contracts CodeStorage (r:2 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts Nonce (r:1 w:1)
	// Storage: Contracts OwnerInfoOf (r:1 w:1)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `s` is `[0, 960]`.
	fn seal_instantiate_per_transfer_salt_kb(t: u32, s: u32, ) -> Weight {
		(16_212_876_000 as Weight)
			// Standard Error: 45_374_000
			.saturating_add((815_960_000 as Weight).saturating_mul(t as Weight))
			// Standard Error: 21_000
			.saturating_add((127_881_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(167 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(t as Weight)))
			.saturating_add(RocksDbWeight::get().writes(165 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(t as Weight)))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_sha2_256(r: u32, ) -> Weight {
		(304_187_000 as Weight)
			// Standard Error: 140_000
			.saturating_add((62_142_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight {
		(550_155_000 as Weight)
			// Standard Error: 41_000
			.saturating_add((324_490_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_keccak_256(r: u32, ) -> Weight {
		(302_042_000 as Weight)
			// Standard Error: 137_000
			.saturating_add((74_131_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight {
		(348_912_000 as Weight)
			// Standard Error: 28_000
			.saturating_add((249_600_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_blake2_256(r: u32, ) -> Weight {
		(303_303_000 as Weight)
			// Standard Error: 143_000
			.saturating_add((52_295_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight {
		(409_530_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((98_927_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_hash_blake2_128(r: u32, ) -> Weight {
		(304_494_000 as Weight)
			// Standard Error: 145_000
			.saturating_add((51_856_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `n` is `[0, 1024]`.
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight {
		(400_722_000 as Weight)
			// Standard Error: 16_000
			.saturating_add((99_126_000 as Weight).saturating_mul(n as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_ecdsa_recover(r: u32, ) -> Weight {
		(430_844_000 as Weight)
			// Standard Error: 948_000
			.saturating_add((3_076_271_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	/// The range of component `r` is `[0, 20]`.
	fn seal_ecdsa_to_eth_address(r: u32, ) -> Weight {
		(319_969_000 as Weight)
			// Standard Error: 617_000
			.saturating_add((2_042_610_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: System Account (r:1 w:0)
	// Storage: Contracts ContractInfoOf (r:1 w:1)
	// Storage: Contracts CodeStorage (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Contracts OwnerInfoOf (r:16 w:16)
	/// The range of component `r` is `[0, 20]`.
	fn seal_set_code_hash(r: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 1_658_000
			.saturating_add((783_214_000 as Weight).saturating_mul(r as Weight))
			.saturating_add(RocksDbWeight::get().reads((79 as Weight).saturating_mul(r as Weight)))
			.saturating_add(RocksDbWeight::get().writes((79 as Weight).saturating_mul(r as Weight)))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64const(r: u32, ) -> Weight {
		(119_142_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((596_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64load(r: u32, ) -> Weight {
		(118_251_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_362_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64store(r: u32, ) -> Weight {
		(118_472_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_415_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_select(r: u32, ) -> Weight {
		(118_775_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_775_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_if(r: u32, ) -> Weight {
		(118_423_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_976_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br(r: u32, ) -> Weight {
		(118_826_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((929_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_if(r: u32, ) -> Weight {
		(117_976_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_450_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_br_table(r: u32, ) -> Weight {
		(118_338_000 as Weight)
			// Standard Error: 5_000
			.saturating_add((1_590_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `e` is `[1, 256]`.
	fn instr_br_table_per_entry(e: u32, ) -> Weight {
		(120_947_000 as Weight)
			// Standard Error: 0
			.saturating_add((5_000 as Weight).saturating_mul(e as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call(r: u32, ) -> Weight {
		(119_608_000 as Weight)
			// Standard Error: 14_000
			.saturating_add((7_099_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_call_indirect(r: u32, ) -> Weight {
		(132_759_000 as Weight)
			// Standard Error: 21_000
			.saturating_add((9_411_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `p` is `[0, 128]`.
	fn instr_call_indirect_per_param(p: u32, ) -> Weight {
		(142_986_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((473_000 as Weight).saturating_mul(p as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_get(r: u32, ) -> Weight {
		(119_240_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((635_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_set(r: u32, ) -> Weight {
		(119_655_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((683_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_local_tee(r: u32, ) -> Weight {
		(119_478_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((914_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_get(r: u32, ) -> Weight {
		(121_700_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_166_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_global_set(r: u32, ) -> Weight {
		(122_057_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_360_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_memory_current(r: u32, ) -> Weight {
		(118_672_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((666_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 1]`.
	fn instr_memory_grow(r: u32, ) -> Weight {
		(118_138_000 as Weight)
			// Standard Error: 2_353_000
			.saturating_add((236_075_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64clz(r: u32, ) -> Weight {
		(118_801_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((889_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ctz(r: u32, ) -> Weight {
		(118_566_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((891_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64popcnt(r: u32, ) -> Weight {
		(118_891_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((882_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eqz(r: u32, ) -> Weight {
		(119_141_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((885_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendsi32(r: u32, ) -> Weight {
		(119_305_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((858_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64extendui32(r: u32, ) -> Weight {
		(118_851_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((862_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i32wrapi64(r: u32, ) -> Weight {
		(118_965_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((877_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64eq(r: u32, ) -> Weight {
		(118_705_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_348_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ne(r: u32, ) -> Weight {
		(118_581_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_354_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64lts(r: u32, ) -> Weight {
		(118_682_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_350_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ltu(r: u32, ) -> Weight {
		(117_052_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_473_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gts(r: u32, ) -> Weight {
		(120_256_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_309_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64gtu(r: u32, ) -> Weight {
		(119_651_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_340_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64les(r: u32, ) -> Weight {
		(118_923_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((1_349_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64leu(r: u32, ) -> Weight {
		(119_062_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_349_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64ges(r: u32, ) -> Weight {
		(118_564_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_356_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64geu(r: u32, ) -> Weight {
		(118_752_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_347_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64add(r: u32, ) -> Weight {
		(118_873_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((1_318_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64sub(r: u32, ) -> Weight {
		(118_920_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_325_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64mul(r: u32, ) -> Weight {
		(119_002_000 as Weight)
			// Standard Error: 8_000
			.saturating_add((1_327_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divs(r: u32, ) -> Weight {
		(118_608_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((1_998_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64divu(r: u32, ) -> Weight {
		(119_088_000 as Weight)
			// Standard Error: 7_000
			.saturating_add((2_018_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rems(r: u32, ) -> Weight {
		(119_557_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_967_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64remu(r: u32, ) -> Weight {
		(118_651_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((2_088_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64and(r: u32, ) -> Weight {
		(119_148_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_312_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64or(r: u32, ) -> Weight {
		(119_012_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_325_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64xor(r: u32, ) -> Weight {
		(119_284_000 as Weight)
			// Standard Error: 12_000
			.saturating_add((1_326_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shl(r: u32, ) -> Weight {
		(118_958_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_341_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shrs(r: u32, ) -> Weight {
		(119_312_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((1_331_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64shru(r: u32, ) -> Weight {
		(118_437_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_356_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotl(r: u32, ) -> Weight {
		(118_997_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((1_339_000 as Weight).saturating_mul(r as Weight))
	}
	/// The range of component `r` is `[0, 50]`.
	fn instr_i64rotr(r: u32, ) -> Weight {
		(119_105_000 as Weight)
			// Standard Error: 6_000
			.saturating_add((1_342_000 as Weight).saturating_mul(r as Weight))
	}
}
